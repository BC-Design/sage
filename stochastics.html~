<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
<!-- Local files containing the website icon and stylesheet. -->
<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
<link rel="stylesheet" type="text/css" href="theme.css">

<!-- Imports needed to use the Sage cell server. -->
<script type="text/javascript" src="http://aleph2.sagemath.org/static/jquery.min.js"></script>
<script type="text/javascript" src="http://aleph2.sagemath.org/embedded_sagecell.js"></script>
<script type="text/javascript" src="sagecell.js"></script>
<script type="text/javascript" src="sage-text.js"></script>
<script type="text/javascript" src="ganalytics.js"></script>

<!-- Additional CSS customizations --> 
<style type="text/css"></style>

<!-- Page title --> 
<title>Sage Math - Stochastics</title>
</head>


<body>
<h1>Sage Math Tutorial - Stochastics</h1>
<script type="text/javascript">sageHome()</script>

<p>This page contains interactive Sage widgets - edit and re-evaluate them!</p>
<p>Typically, chemical engineers can make use of the so-called 'Law of Mass Action' to predict the behaviours of large populations of atoms in dynamic equilibrium.  This is what enables us to use concepts like 'reaction rate constants' to get meaningful answers to real-world chemical problems.  But consider a single particle that can flip-flop between two different forms.  What does a rate constant have to do with the probability that this particle will be in a given state at a given time?  If there is a probability of flipping states over a given time period, how long might you expect to wait between flips?  How do the behaviors of small groups of particles and the probability of their actions, the 'stochastic world', connect to the macroscopic phenomena that we observe in large systems?</p>

<p>In this example, we simulate a small collection of particles (50) as they flip-flop between two different states; in parallel, we simulate a large collection of the same particles that follow the 'Law of Mass Action'.  Then, we graph them on top of eachother and observe the 'stochastic noise' that occurs in systems with few actors.</p>

<!-- Create the Sage cell.  
     You can put this anywhere, e.g., inside tables, etc. -->
<div class="sagecell-plot" id="sagecell2"><script type="application/sage">
## This sheet simulates a reversible first-order chemical reaction: A1 <-> A2
## The section simulates this system with the Gillespie Algorithm
var('t dt tf Tprint at m i')
X = [0,0]            ## holds [chemicals]
X0 = [50,0]          ## holds ICs
k = [10,1]           ## holds rate constants
a = [0,0]            ## holds calc'd rxn rates
r = [0,0]            ## holds the random numbers
sol = []             ## holds the solution
t = 0                ## time, start
tf = 1               ## time, end
dt = tf/1000         ## time, step
m = len(a); Tprint = t; X = copy(X0)

while (t<tf):
    at = 0
    for j in range(0,m):
        a[j] = k[j]*X[j]
        at = at + a[j]
        r[j] = random()
    #show(a[1])
    t = t+(1/at)*ln(1/r[0])              ## next rxn occurs in time increment 'tau'
    while(t>=Tprint):                    ## until the next reaction occurs..
        sol.append([Tprint,X[0],X[1]])   ## the concentrations stay the same
        Tprint=Tprint+dt                 ## as time increments
    i = 1
    
    while (i <= m):
        sum = 0
        for l in range(0,i):
            sum = sum + a[l]
        if (sum > r[1]*at):            
            if (i == 1):
                X[0] = X[0]-1
                X[1] = X[1]+1
                break
            elif (i == 2):
                X[0] = X[0]+1
                X[1] = X[1]-1
        i = i + 1

solT = []; solA = []; solB = []
for q in range(0,len(sol)):
    solT.append(sol[q][0]); solA.append(sol[q][1]); solB.append(sol[q][2])

## This section simulates the system by applying the law of mass action
## The initial value problem is solved by Runge-Kutta and the dynamics are graphed

var('k1 k_1 A1 A2 t')
k1 = k[0]; k_1 = k[1]

## Calculation Parameters
end_points = tf
stepsize = dt
steps = end_points/stepsize
ics = [0,X0[0],X0[1]]

## Equations
r1 = (diff(A1,t) == k_1*A2 - k1*A1)
r2 = (diff(A2,t) == k1*A1 - k_1*A2)

des = [r1.rhs(), r2.rhs()]
sol = desolve_system_rk4(des,[A1,A2],ics,ivar=t,end_points=end_points,step=stepsize)

## Process the output into a form that can be graphed
sols_1=[]
sols_2=[]

for i in range(steps):
    sols_1.append([sol[i][0],sol[i][1]])
    sols_2.append([sol[i][0],sol[i][2]])

## Create a plot object
a = list_plot([])

## Set the plot parameters
title = "first-order reversible reaction"                ## Graph Title
xmin = 0                                                 ## X minimum
xmax = end_points                                        ## X maximum
ymin = 0                                                 ## Y minimum
ymax = (X0[0]+X0[1])                                     ## Y maximum

## Add a title to the plot
a += text(title,(xmax/1.8,ymax),color='black',fontsize=15)

## Add the desired lines to the plot
a += list_plot(sols_1,color='blue',legend_label='[A]')
a += list_plot(sols_2,color='red',legend_label='[B]')
a += list_plot(zip(solT,solA), color='blue')
a += list_plot(zip(solT,solB), color='red', ymin=0, ymax=ymax)
a.set_legend_options(ncol=2,borderaxespad=5,back_color='whitesmoke',fancybox=true)
a.axes_labels(['time','particle number']); a.axes_label_color('grey'); show(a)
</script></div>

<script type="text/javascript">sageFooter()</script>

</body>
</html>


