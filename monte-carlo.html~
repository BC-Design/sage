<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
<!-- Local files containing the website icon and stylesheet. -->
<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
<link rel="stylesheet" type="text/css" href="theme.css">

<!-- Imports needed to use the Sage cell server. -->
<script type="text/javascript" src="http://aleph2.sagemath.org/static/jquery.min.js"></script>
<script type="text/javascript" src="http://aleph2.sagemath.org/embedded_sagecell.js"></script>
<script type="text/javascript" src="sagecell.js"></script>
<script type="text/javascript" src="sage-text.js"></script>
<script type="text/javascript" src="ganalytics.js"></script>

<!-- Additional CSS customizations --> 
<style type="text/css"></style>

<!-- Page title --> 
<title>Sage Math - Monte Carlo</title>
</head>


<body>
<h1>Sage Math Tutorial - Monte Carlo Methods</h1>
<script type="text/javascript">sageHome()</script>

<p>This page contains interactive Sage widgets - edit and re-evaluate them!</p>
<p>"Monte Carlo methods (or Monte Carlo experiments) are a class of computational algorithms that rely on repeated random sampling to compute their results. Monte Carlo methods are often used in computer simulations of physical and mathematical systems. These methods are most suited to calculation by a computer and tend to be used when it is infeasible to compute an exact result with a deterministic algorithm. This method is also used to complement theoretical derivations." via: <a href=http://en.wikipedia.org/wiki/Monte_Carlo_method>Wikipedia</a></p>


<!-- Create the Sage cell.  
     You can put this anywhere, e.g., inside tables, etc. -->
<h2>Monte Carlo Estimation of The Value of Pi</h2>
<div class="sagecell-plot" id="sagecell1"><script type="application/sage">
### This script estimates pi by shooting randomly at a circle inscribed in a square
var ('x y r n'); r = 1; inside = 0; points = []
n = 100  ## Try changing this! This is the number of shots the estimate is based on

### Shoot randomly into the square:
for i in range(0,n):
    [x,y]=[random(),random()]
    points.append([x,y])
    
### If a shot lands inside the circle, make a note of it
    if (y <= sqrt((r^2)-(x^2))):
        inside += 1
        
### Approximate pi based on the fraction of shots that landed in the circle
### Area of circle = pi*r^2; Area of square = (2*r)^2 = 4*r^2
### Shots in circle / Shots in square = (pi*r^2)/(4*r^20 = pi()/4
piapprox = 4*(inside / n)
estimate = "Based on "
estimate += str(n)
estimate += " shots, pi is ~= "
estimate += str(piapprox.n())
show(estimate)

### Graph the solution
circle = []
for i in range(0,1000):
    x = i/1000
    y = sqrt((r^2)-(i/1000)^2)
    circle.append([x,y])

graph = list_plot(points)
graph += list_plot(circle,color='red',figsize=[5,4],plotjoined=true)
show(graph)
</script></div>

<script type="text/javascript">sageFooter()</script>
</body>
</html>


