<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
<!-- Local files containing the website icon and stylesheet. -->
<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
<link rel="stylesheet" type="text/css" href="theme.css">

<!-- Imports needed to use the Sage cell server. -->
<script type="text/javascript" src="https://sagecell.sagemath.org/static/jquery.min.js"></script>
<script type="text/javascript" src="https://sagecell.sagemath.org/embedded_sagecell.js"></script>
<script type="text/javascript" src="sagecell.js"></script>
<script type="text/javascript" src="sage-text.js"></script>
<script type="text/javascript" src="ganalytics.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>

<!-- Additional CSS customizations --> 
<style type="text/css"></style>

<!-- Page title --> 
<title>Sage Math - Advanced</title>
</head>


<body>
<h1>Sage Math Tutorial - Advanced Examples</h1>
<script type="text/javascript">sageHome()</script>

<p>This web page contains an interactive Sage widget. You can edit it however you want.</p>
<br />

<h2>T-Cell Activation: Stochastic vs Deterministic</h2>
<div class="linkedcells">
<p>This demo generates stochastic and deterministic trajectories for T-cell activation and graphs them for comparison.  This first section generates a stochastic trajectory using the Gillespie algorithm:</p>

<div class="sagecell-linked" id="sagecell1"><script type="application/sage">
var('t tStep tEnd Tprint at m i'); sol = []
X0 = [100,100,100,100,100]; X = copy(X0)     ## holds [species], ICs (n0,n1,n2,n3,n4)
k = [0.1,0.1,0.1,0.1,0.2,0.2,0.2,0.2,10.0]; rxns = len(k)
a = [0 for i in range(rxns)]                 ## holds rxn rates (once calculated)
r = [0 for i in range(rxns)]                 ## holds the random numbers (once created)
t = 0; tEnd = 200; tStep = 0.01; Tprint = t

def rxn(x, plus, minus):
    y = copy(x)
    for i in range(0,len(plus)):  y[plus[i]] += 1
    for j in range(0,len(minus)): y[minus[j]] -= 1
    x = copy(y)
    return x

while (t<tEnd):
    at = 0  ## 'overall reaction rate'; takes into account all reactions
    a[0] = k[0]*X[0]    # forward reaction 1
    a[1] = k[1]*X[1]    # forward reaction 2
    a[2] = k[2]*X[2]    # forward reaction 3
    a[3] = k[3]*X[3]    # forward reaction 4
    a[4] = k[4]*X[1]    # reverse reaction 1
    a[5] = k[5]*X[2]    # reverse reaction 2
    a[6] = k[6]*X[3]    # reverse reaction 3
    a[7] = k[7]*X[4]    # reverse reaction 4
    a[8] = k[8]*X[4]    # irreversible activation
    
    for j in range(0,rxns):
        at = at + a[j]         ## calculate the 'overall reaction rate'
        r[j] = random()        ## generate the needed random numbers

    t = t+(1/at)*ln(1/r[0])    ## next rxn occurs in time increment 'tau'
    while(t>=Tprint):                                 ## until the next reaction occurs..
        sol.append([Tprint,X[0],X[1],X[2],X[3],X[4]]) ## the concentrations stay the same
        Tprint=Tprint+tStep                           ## as time increments
    
    i = 1                          ## (which reaction is being investigated)
    while (i <= rxns):                ## and when a reaction DOES occur...
        sum = 0
        for l in range(0,i):
            sum = sum + a[l]    ## sum together the rates (for normalization)
        if (sum > r[1]*at):     ## randomly select a value (0, total rate)
            ## if value falls within rate q, rxn q occurs
            if (i == 1): X = rxn(x=X,plus=[1],minus=[0]); break
            elif (i == 2): X = rxn(x=X,plus=[2],minus=[1]); break
            elif (i == 3): X = rxn(x=X,plus=[3],minus=[2]); break
            elif (i == 4): X = rxn(x=X,plus=[4],minus=[3]); break
            elif (i == 5): X = rxn(x=X,plus=[0],minus=[1]); break
            elif (i == 6): X = rxn(x=X,plus=[1],minus=[2]); break
            elif (i == 7): X = rxn(x=X,plus=[2],minus=[3]); break
            elif (i == 8): X = rxn(x=X,plus=[3],minus=[4]); break
            elif (i == 9): X = rxn(x=X,plus=[],minus=[4]); break
            else: show("something went wrong...")
        i = i + 1

stoch_sol = [[] for i in range(0,len(X))]
for i in range(0,len(sol)):
    for j in range(0,len(stoch_sol)):
        stoch_sol[j].append([sol[i][0],sol[i][j+1]])
</script></div>

<p>This second section generates a deterministic trajectory by solving the system of differential equations with a Runge-Kutta method:</p>

<div class="sagecell-linked" id="sagecell2"><script type="application/sage">
var('k1 k2 k3 k4 k5 k6 k7 k8 k9') ## kinetic parameters
var('N00 N10 N20 N30 N40')        ## initial conditions
var('N0 N1 N2 N3 N4 t')           ## variables
var('r1 r2 r3 r4 r5')             ## reactions
## INITIAL CONDITIONS
N00 = 100; N10 = 100; N20 = 100; N30 = 100; N40 = 100
## KINETIC CONSTANTS
k1 = k[0]; k2 = k[1]; k3 = k[2]; k4 = k[3]; k5 = k[4]
k6 = k[5]; k7 = k[6]; k8 = k[7]; k9 = k[8]
## CALCULATION PARAMETERS
end_points = 200; stepsize = 0.1; steps = end_points/stepsize
ics = [0,N00,N10,N20,N30,N40]; dvars = [N0,N1,N2,N3,N4]

## EQUATIONS
r1 = (diff(N0,t) == k5*N1-k1*N0)
r2 = (diff(N1,t) == k1*N0+k6*N2-k2*N1-k5*N1)
r3 = (diff(N2,t) == k2*N1+k7*N3-k3*N2-k6*N2)
r4 = (diff(N3,t) == k3*N2+k8*N4-k4*N3-k7*N3)
r5 = (diff(N4,t) == k4*N3-k8*N4-k9*N4)

## NUMERICAL SOLUTION OF A SERIES OF DIFFERENTIAL EQUATIONS
des = [r1.rhs(), r2.rhs(), r3.rhs(), r4.rhs(), r5.rhs()]
sol = desolve_system_rk4(des,dvars,ics,ivar=t,end_points=end_points,step=stepsize)

detrm_sol = [[] for i in range(0,len(X))]
for i in range(0,steps):
    for j in range(0,len(detrm_sol)):
        detrm_sol[j].append([sol[i][0],sol[i][j+1]])
</script></div>

<p> This final cell graphs the results for comparison:</p>
<div class="sagecell-linked" id="sagecell3"><script type="application/sage">
stoch_colors = ['indianred', 'lightsalmon', 'khaki', 'lightgreen', 'lightblue']
detrm_colors = ['red', 'orange', 'yellow', 'green', 'blue']
a = list_plot([]); labels = ['N0', 'N1', 'N2', 'N3', 'N4']
for i in range(0,len(stoch_sol)):
    a += list_plot(stoch_sol[i],color=stoch_colors[i],figsize=[7,5])
    a += list_plot(detrm_sol[i],color=detrm_colors[i],figsize=[7,5],legend_label=labels[i])

xmin = 0; xmax = end_points; ymin = 0; ymax = 280
title = "TCR Activation"; a += text(title,(xmax/1.8,ymax),color='black',fontsize=15)
a.set_legend_options(ncol=5,borderaxespad=5,back_color='whitesmoke',fancybox=true)
a.axes_labels(['time','number']); a.axes_label_color('grey'); show(a)
</script></div>
</div>

<p>See <a href="https://github.com/sagemath/sagecell/blob/master/doc/embedding.rst">this page</a> for more documentation about embedding Sage Cells in your web pages. The <a href="https://github.com/sagemath/sagecell">Sage Cell Server</a> is open source, so you can also install your own server.

<script type="text/javascript">sageFooter()</script>

</body>
</html>


